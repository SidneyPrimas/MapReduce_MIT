package main

import (
	"fmt"
	"mapreduce"
	"os"
	"strconv"
	"strings"
	"unicode"
	"sort"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Step 1: Parse value string into key/value pairs, where the key
	// is a word, and the value is always 1, indicating that the word
	// appears once. 

	words := strings.FieldsFunc(value, ourSplitter)

	for _, w := range words {
		//Not counting. We are just adding the struct into array.
		//There might be many of the same words in the array. 
		kv := mapreduce.KeyValue{w,document}
		res = append(res, kv)
	}
	return res
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	mapBooks := make(map[string]string)
	 
	 for _,books := range(values) {
	 	mapBooks[books] = "1"
	 }

	 sortedBooks := make([]string, len(mapBooks))

	 i := 0
	 for k := range(mapBooks) {
	 	sortedBooks[i] = k
	 	i++
	 }

	 sort.Strings(sortedBooks)
	 stringOut := strings.Join(sortedBooks, ",")

	// Returns the string representation of result in base 10. 
	count := strconv.FormatInt(int64(len(sortedBooks)),10)
	resultString := strings.Join([]string{count, stringOut} , " ")

	return resultString
}


//Function: used to define a word be identifing what is a letter vs. not. 
//Used in FieldsFunc in mapF to split the initial input string. 
func ourSplitter(c rune) bool {
	return !unicode.IsLetter(c)
}


// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
